import "dotenv/config";
import express from "express";
import { Telegraf, Markup } from "telegraf";
import { createReadStream, existsSync } from "fs";
import path from "path";

const { BOT_TOKEN, OFFER_URL, START_IMG, FINAL_IMG } = process.env;
if (!BOT_TOKEN) throw new Error("BOT_TOKEN is missing");

const bot = new Telegraf(BOT_TOKEN);

/**
 * –í–æ–ø—Ä–æ—Å—ã: 10 —à—Ç—É–∫ (–ø–µ—Ä–≤—ã–µ 6 –ø–æ–ø-–∫—É–ª—å—Ç—É—Ä–∞, 7‚Äì10 ‚Äî —Å –∫–∞–∑–∏–Ω–æ-—Ç–µ–º–∞—Ç–∏–∫–æ–π).
 * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É (./images/...) –∏–ª–∏ URL.
 */
const questions = [
  {
    text: "–ö–∞–∫–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ –ø–æ–ª—É—á–∏–ª –£–æ–ª—Ç–µ—Ä –£–∞–π—Ç –≤ —Å–µ—Ä–∏–∞–ª–µ ¬´–í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ¬ª?",
    img: "./images/walter.png",
    opts: ["–•–∞–π–∑–µ–Ω–±–µ—Ä–≥", "–ë–ª—ç–∫ –î–∂–µ–∫", "–î–æ–∫", "–ú–∏—Å—Ç–µ—Ä –£–∞–π—Ç"],
    correct: 0,
  },
  {
    text: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞—Ñ–µ, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≥–µ—Ä–æ–∏ —Å–µ—Ä–∏–∞–ª–∞ ¬´–î—Ä—É–∑—å—è¬ª?",
    img: "./images/friends_cafe.jpg",
    opts: ["Central Perk", "Central Park", "Coffee Time", "Perk Central"],
    correct: 0,
  },
  {
    text: "–ö–∞–∫—É—é –µ–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤ –ø–µ—Ä–≤–æ–º –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã?",
    img: "./images/game.jpg",
    opts: ["–†–∏—Å –∏ –∫–∏–º—á–∏", "–Ø–π—Ü–æ –∏ –±—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã", "–õ–∞–ø—à–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", "–ü–µ—á–µ–Ω—å–µ –¥–∞–ª–≥–æ–Ω–∞"],
    correct: 1,
  },
  {
    text: "–ö—Ç–æ —Å–∏–¥–∏—Ç –Ω–∞ –ñ–µ–ª–µ–∑–Ω–æ–º —Ç—Ä–æ–Ω–µ –≤ –Ω–∞—á–∞–ª–µ ¬´–ò–≥—Ä—ã –ø—Ä–µ—Å—Ç–æ–ª–æ–≤¬ª?",
    img: "./images/got_throne.jpg",
    opts: [
      "–†–æ–±–µ—Ä—Ç –ë–∞—Ä–∞—Ç–µ–æ–Ω",
      "–î–∂–æ—Ñ—Ä–∏ –ë–∞—Ä–∞—Ç–µ–æ–Ω",
      "–¢–∞–π–≤–∏–Ω –õ–∞–Ω–Ω–∏—Å—Ç–µ—Ä",
      "–î–µ–π–µ–Ω–µ—Ä–∏—Å –¢–∞—Ä–≥–∞—Ä–∏–µ–Ω",
    ],
    correct: 0,
  },
  {
    text: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –Ω–∞ –º–µ—Ç–ª–∞—Ö –≤ ¬´–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ¬ª?",
    img: "./images/harry_quidditch.jpg",
    opts: ["–ö–≤–∏–¥–¥–∏—á", "–°–Ω–∏—Ç—á–±–æ–ª", "–§–ª—ç—Ç–±–æ–ª", "–ì—Ä–∏–≤–æ–Ω"],
    correct: 0,
  },
  {
    text: "–í –∫–∞–∫–æ–º —Ñ–∏–ª—å–º–µ –∫–æ–º–∞–Ω–¥–∞ –¥—Ä—É–∑–µ–π —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ä–∑–∫–∏–π –ø–ª–∞–Ω –≤ –≥–æ—Ä–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø–∏—Ç?",
    img: "./images/oceans11_city.jpg",
    opts: ["–û—É—à–µ–Ω 11", "–ë–æ–ª—å—à–æ–π –∫—É—à", "–ò–ª–ª—é–∑–∏—è –æ–±–º–∞–Ω–∞", "–ê—Ñ—ë—Ä–∞ –¢–æ–º–∞—Å–∞ –ö—Ä–∞—É–Ω–∞"],
    correct: 0,
  },
  // ===== –ö–ê–ó–ò–ù–û (7‚Äì10) =====
  {
    text: "–í –∫–∞–∫–æ–º —Ñ–∏–ª—å–º–µ –î–∂–µ–π–º—Å –ë–æ–Ω–¥ –∏–≥—Ä–∞–µ—Ç –≤ –ø–æ–∫–µ—Ä –ø—Ä–æ—Ç–∏–≤ –õ–µ –®–∏—Ñ—Ñ—Ä–∞?",
    img: "./images/bond_casino_royale.jpg",
    opts: [
      "–ö–∞–∑–∏–Ω–æ –†–æ—è–ª—å",
      "–ö–≤–∞–Ω—Ç–æ–º –º–∏–ª–æ—Å–µ—Ä–¥–∏—è",
      "–ì–æ–ª–¥—Ñ–∏–Ω–≥–µ—Ä",
      "–£–º—Ä–∏, –Ω–æ –Ω–µ —Å–µ–π—á–∞—Å",
    ],
    correct: 0,
  },
  {
    text: "–§–∏–ª—å–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ MIT, –æ–±—ã–≥—Ä–∞–≤—à–∏—Ö –∫–∞–∑–∏–Ω–æ –≤ –±–ª—ç–∫–¥–∂–µ–∫?",
    img: "./images/film_21.jpg",
    opts: ["–î–≤–∞–¥—Ü–∞—Ç—å –æ–¥–Ω–æ", "–ë–æ–ª—å—à–æ–π –∫—É—à", "–ò–≥—Ä–∞ –ú–æ–ª–ª–∏", "–®—É–ª–µ—Ä–∞"],
    correct: 0,
  },
  {
    text: "–í –∫–∞–∫–æ–º —Ñ–∏–ª—å–º–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∂–µ–Ω—â–∏–Ω—ã, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–≤—à–µ–π –ø–æ–¥–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã?",
    img: "./images/mollys_game.jpg",
    opts: [
      "–ò–≥—Ä–∞ –ú–æ–ª–ª–∏",
      "–®—É–ª–µ—Ä–∞",
      "–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª –≤—Å—ë",
      "–°—Ç–∏–≤ –î–∂–æ–±—Å",
    ],
    correct: 0,
  },
  {
    text: "–í —Ñ–∏–ª—å–º–µ ¬´–ò–≥—Ä–æ–∫¬ª (The Gambler, 2014) –≥–µ—Ä–æ–π –ú–∞—Ä–∫–∞ –£–æ–ª–±–µ—Ä–≥–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∏–ª—å–º–∞ –≤—ã–∏–≥—Ä–∞–ª –≤ –±–ª—ç–∫–¥–∂–µ–∫‚Ä¶",
    img: "./images/igrok.jpeg",
    opts: ["20 000$", "40 000$", "60 000$", "80 000$"],
    correct: 1,
  },
];

// –°–µ—Å—Å–∏–∏: chatId -> { idx, score, correctBtn }
const sessions = new Map();

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
function shuffleIndexes(n) {
  return Array.from({ length: n }, (_, i) => i)
    .map((i) => ({ i, r: Math.random() }))
    .sort((a, b) => a.r - b.r)
    .map((o) => o.i);
}

function keyboardFromOptions(options) {
  return Markup.inlineKeyboard(
    options.map((label, i) => Markup.button.callback(label, `a_${i}`)),
    { columns: 2 },
  );
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ç–æ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª/URL) —Å —Ñ–æ–ª–±—ç–∫–æ–º
function photoInput(pathOrUrl) {
  if (!pathOrUrl) return undefined;
  const isUrl = /^https?:\/\//i.test(pathOrUrl);
  if (isUrl) return { url: pathOrUrl };
  const abs = path.resolve(process.cwd(), pathOrUrl);
  if (!existsSync(abs)) return undefined; // —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë–º undefined
  return { source: createReadStream(abs) };
}

async function sendQuestion(ctx) {
  const chatId = ctx.chat.id;
  const s = sessions.get(chatId);
  const q = questions[s.idx];

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
  const order = shuffleIndexes(q.opts.length);
  const mixedOpts = order.map((k) => q.opts[k]);
  const correctBtn = order.indexOf(q.correct);
  s.correctBtn = correctBtn;

  const caption = `–í–æ–ø—Ä–æ—Å ${s.idx + 1}/${questions.length}:\n${q.text}`;

  try {
    const input = photoInput(q.img);
    if (input) {
      await ctx.replyWithPhoto(input, {
        caption,
        ...keyboardFromOptions(mixedOpts),
      });
    } else {
      await ctx.reply(caption, keyboardFromOptions(mixedOpts));
    }
  } catch (err) {
    console.error("sendQuestion photo error:", err);
    await ctx.reply(caption, keyboardFromOptions(mixedOpts));
  }
}

// START –∏ —Ä–µ—Å—Ç–∞—Ä—Ç
bot.start(async (ctx) => {
  sessions.set(ctx.chat.id, { idx: 0, score: 0, correctBtn: null });

  const startImage = START_IMG || "./images/start.jpg"; // 1080x1350/1920
  const startInput = photoInput(startImage);
  const startCaption =
    "üé¨ –î—É–º–∞–µ—à—å, –∑–Ω–∞–µ—à—å —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –ª—É—á—à–µ –≤—Å–µ—Ö? –î–æ–∫–∞–∂–∏ —ç—Ç–æ –≤ –Ω–∞—à–µ–º –∫–≤–∏–∑–µ!\n" +
    "–¢–µ–±—è –∂–¥—ë—Ç 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ñ–∏–ª—å–º–∞—Ö –∏ —Å–µ—Ä–∏–∞–ª–∞—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –æ—Ç –∫–ª–∞—Å—Å–∏–∫–∏ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∏—Ç–æ–≤.\n\n" +
    "üî• –ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ç–µ–±—è –∂–¥—ë—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –±–æ–Ω—É—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è!\n\n" +
    "–ò–≥—Ä–∞–π –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–π –±–æ–Ω—É—Å";

  if (startInput) {
    await ctx.replyWithPhoto(startInput, {
      caption: startCaption,
      ...Markup.inlineKeyboard([
        Markup.button.callback("–ù–∞—á–∞—Ç—å", "start_quiz"),
      ]),
    });
  } else {
    await ctx.reply(
      startCaption,
      Markup.inlineKeyboard([Markup.button.callback("–ù–∞—á–∞—Ç—å", "start_quiz")]),
    );
  }
});

bot.action("start_quiz", async (ctx) => {
  sessions.set(ctx.chat.id, { idx: 0, score: 0, correctBtn: null });
  await sendQuestion(ctx);
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ a_0..a_3
bot.action(/a_\d+/, async (ctx) => {
  const chatId = ctx.chat.id;
  const s = sessions.get(chatId);
  if (!s) return ctx.answerCbQuery("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å");

  const picked = Number(ctx.match[0].split("_")[1]);

  if (picked === s.correctBtn) {
    s.score++;
    await ctx.answerCbQuery("‚úÖ –í–µ—Ä–Ω–æ!");
  } else {
    await ctx.answerCbQuery("‚ùå –ù–µ–≤–µ—Ä–Ω–æ");
  }

  s.idx++;

  if (s.idx < questions.length) {
    await sendQuestion(ctx);
  } else {
    const url = OFFER_URL || "https://1wilib.life/?open=register&p=dmit";

    const finalImage = FINAL_IMG || "./images/bonus4.jpg"; // 1080x1350/1920 –≤–µ—Ä—Ç–∏–∫–∞–ª—å
    const finalInput = photoInput(finalImage);
    const finalCaption =
      `üèÅ –ö–≤–∏–∑ –æ–∫–æ–Ω—á–µ–Ω!\n` +
      `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${s.score} –∏–∑ ${questions.length}.\n\n` +
      `üí• –•–≤–∞—Ç–∏—Ç —Å–º–æ—Ç—Ä–µ—Ç—å ‚Äî –∂–º–∏, –∞–∫—Ç–∏–≤–∏—Ä—É–π –±–æ–Ω—É—Å –∏ –æ—Ç—ã–≥—Ä–∞–π—Å—è –ø–æ –ø–æ–ª–Ω–æ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å`;

    if (finalInput) {
      await ctx.replyWithPhoto(finalInput, {
        caption: finalCaption,
        ...Markup.inlineKeyboard([
          Markup.button.url("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ë–û–ù–£–°", url),
          Markup.button.callback("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", "start_quiz"),
        ]),
      });
    } else {
      await ctx.reply(
        finalCaption,
        Markup.inlineKeyboard([
          Markup.button.url("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ë–û–ù–£–°", url),
          Markup.button.callback("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", "start_qu–∏–∑"),
        ]),
      );
    }

    sessions.delete(chatId);
  }
});

// Keep-alive –¥–ª—è Replit
const app = express();
app.get("/", (_, res) => res.send("OK"));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log("Keep-alive on :" + PORT));

// –ó–∞–ø—É—Å–∫ long polling
bot.launch().then(() => console.log("Bot started"));

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
